x# Find eligible builder and runner images on Docker Hub. We use Ubuntu/Debian instead of
# Alpine to avoid DNS resolution issues in production.
#
# https://hub.docker.com/r/hexpm/elixir/tags?page=1&name=ubuntu
# https://hub.docker.com/_/ubuntu?tab=tags
#
#
# This file is based on these images:
#
#   - https://hub.docker.com/r/hexpm/elixir/tags - for the build image
#   - https://hub.docker.com/_/debian?tab=tags&page=1&name=bullseye-20210902-slim - for the release image
#   - https://pkgs.org/ - resource for finding needed packages
#   - Ex: hexpm/elixir:1.12.0-erlang-24.0.1-debian-bullseye-20210902-slim
#

ARG BUILDER_IMAGE="elixir:1.13"
ARG RUNNER_IMAGE="debian:bullseye-20210902-slim"

FROM ${BUILDER_IMAGE} as builder

# install build dependencies
RUN apt-get update -y && apt-get install -y build-essential inotify-tools\
  && apt-get clean && rm -f /var/lib/apt/lists/*_*

# prepare build dir
WORKDIR /app

# install hex + rebar
RUN mix local.hex --force && \
  mix local.rebar --force

# set build ENV
ENV MIX_ENV="prod"
ENV BUILD_WITHOUT_QUIC=true

# install mix dependencies
# COPY /app/mix.exs /app/mix.lock ./
COPY /app/mix.exs ./
RUN mix deps.get --only $MIX_ENV
RUN mkdir config

# copy compile-time config files before we compile dependencies
# to ensure any relevant config change will trigger the dependencies
# to be re-compiled.
COPY /app/config/config.exs /app/config/${MIX_ENV}.exs config/
RUN mix deps.compile

COPY /app/priv priv

# note: if your project uses a tool like https://purgecss.com/,
# which customizes asset compilation based on what it finds in
# your Elixir templates, you will need to move the asset compilation
# step down so that `lib` is available.
COPY /app/assets assets

# compile assets
RUN mix assets.deploy

# Compile the release
COPY /app/lib lib

RUN mix compile

# Changes to config/runtime.exs don't require recompiling the code
COPY /app/config/runtime.exs config/

COPY /app/rel rel
RUN mix release

# start a new build stage so that the final image will only contain
# the compiled release and other runtime necessities
FROM ${RUNNER_IMAGE}

ARG DATABASE_URL
ARG SECRET_KEY_BASE
ARG MQTT_SERVER_HOST

ENV DATABASE_URL ${DATABASE_URL}
ENV SECRET_KEY_BASE ${SECRET_KEY_BASE}
ENV MQTT_SERVER_HOST ${SECRET_KEY_BASE}

RUN apt-get update -y && apt-get install -y libstdc++6 openssl libncurses5 locales dcmtk openssh-client rsync python3 python3-pip python3-venv postgresql-client inotify-tools\
  && apt-get clean && rm -f /var/lib/apt/lists/*_*

RUN python3 -m pip install --upgrade pip

RUN echo "    StrictHostKeyChecking no" >>/etc/ssh/ssh_config
RUN echo "    UserKnownHostsFile=/dev/null" >>/etc/ssh/ssh_config

# Set the locale
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

WORKDIR "/app"

RUN python3 -m venv /pydic/venv

RUN . /pydic/venv/bin/activate

RUN pip3 install pydicom

RUN chown nobody /app

# exposed ports (not published)
EXPOSE 4000
EXPOSE 6000

# set runner ENV
ENV MIX_ENV="prod"

RUN . /pydic/venv/bin/activate

# Only copy the final release from the build stage
COPY --from=builder --chown=nobody:root /app/_build/${MIX_ENV}/rel/uploader_t ./

USER nobody

# creat application folders
RUN mkdir observable compressed encrypted

RUN chmod +x /app/bin/*

RUN ls -al /lib

RUN /app/bin/server
