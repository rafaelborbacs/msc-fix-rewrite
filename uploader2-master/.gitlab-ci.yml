# Pipeline image
image: bitwalker/alpine-elixir-phoenix

# Pipeline services
services:
  - postgres:latest

# Pipeline stages
stages:
  - build
  - test
  - deploy
  - production

# Postgres variables and nedeed envs
variables:
  BUILD_WITHOUT_QUIC: "true"
  TAG_LATEST_COMMIT: $CI_COMMIT_AUTHOR/$CI_COMMIT_REF_NAME:latest

# Uploader compile job
compile-ut:
  stage: build
  before_script:
    - echo "Buildando..."
    - cd uploader_t/app
  script:
    - mix deps.get
    - mix compile
  artifacts:
    when: on_success
    paths:
      - uploader_t/app/_build
      - uploader_t/app/deps
      - uploader_t/app/mix.lock
  only:
    - trunk

compile-ur:
  stage: build
  before_script:
    - echo "Buildando..."
    - cd uploader_r/app
  script:
    - mix deps.get
    - mix compile
  artifacts:
    when: on_success
    paths:
      - uploader_r/app/_build
      - uploader_r/app/deps
      - uploader_r/app/mix.lock
  only:
    - trunk

compile-ug:
  stage: build
  before_script:
    - echo "Buildando..." 
    - cd uploader_g/app
  script:
    - mix deps.get
    - mix compile
  artifacts:
    when: on_success
    paths:
      - uploader_g/app/_build
      - uploader_g/app/deps
      - uploader_g/app/mix.lock
  only:
    - trunk

# Scripts for Uploader unittests
test-ut:
  stage: test
  before_script:
    - echo "Testando"
    - cd uploader_t/app
    - mix ecto.create
    - mix ecto.migrate
  script:
    - mix test
  allow_failure: true
  needs: ["compile-ut"]

test-ur:
  stage: test
  before_script:
    - echo "Testando"
    - cd uploader_r/app
    - mix ecto.create
    - mix ecto.migrate
  script: 
    - mix test
  allow_failure: true
  needs: ["compile-ur"]

test-ug:
  stage: test
  before_script:
    - echo "Testando"
    - cd uploader_g/app
    - mix ecto.create
    - mix ecto.migrate
  script: 
    - mix test
  allow_failure: true
  needs: ["compile-ug"]

# Uploader deploy for development test
development-ut:
  image: alpine:latest
  stage: deploy
  before_script:
    - echo "Oi eu estou dando deploy"
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
  script:
    - scp -i $ID_RSA -o StrictHostKeyChecking=no -r ./uploader_t $DIGITALOCEAN_USER@$DIGITALOCEAN_IP:/home/$DIGITALOCEAN_USER/
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $DIGITALOCEAN_USER@$DIGITALOCEAN_IP "docker container rm -f uploader_t_phoenix_1 uploader_t_db_1 || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $DIGITALOCEAN_USER@$DIGITALOCEAN_IP "cd /home/$DIGITALOCEAN_USER/uploader_t ; docker-compose up -d --build"
  needs: ["test-ut"]

development-ur:
  image: alpine:latest
  stage: deploy
  before_script:
    - echo "Oi eu estou dando deploy"
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
  script:
    - scp -i $ID_RSA -o StrictHostKeyChecking=no -r ./uploader_r $DIGITALOCEAN_USER@$DIGITALOCEAN_IP:/home/$DIGITALOCEAN_USER/
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $DIGITALOCEAN_USER@$DIGITALOCEAN_IP "docker container rm -f uploader_r_phoenix_1 uploader_r_db_1 || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $DIGITALOCEAN_USER@$DIGITALOCEAN_IP "cd /home/$DIGITALOCEAN_USER/uploader_r ; docker-compose up -d --build"
  needs: ["test-ur"]

development-ug:
  image: alpine:latest
  stage: deploy
  before_script:
    - echo "Oi eu estou dando deploy"
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
  script:
    - scp -i $ID_RSA -o StrictHostKeyChecking=no -r ./uploader_g $DIGITALOCEAN_USER@$DIGITALOCEAN_IP:/home/$DIGITALOCEAN_USER/ 
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $DIGITALOCEAN_USER@$DIGITALOCEAN_IP "docker container rm -f uploader_g_phoenix_1 uploader_g_db_1 || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $DIGITALOCEAN_USER@$DIGITALOCEAN_IP "cd /home/$DIGITALOCEAN_USER/uploader_g ; docker-compose up -d --build"
  needs: ["test-ug"]

# Uploader deploy for production
production-ut:
  stage: production
  script: 
    - echo "Oi, sou o deploy para producao"
  only:
    - trunk
  needs: ["test-ut"]

production-ur:
  stage: production
  script: 
    - echo "Oi, sou o deploy para producao."
  only:
    - trunk
  needs: ["test-ur"]

production-ug:
  stage: production
  script: 
    - echo "Oi, sou o deploy para producao."
  only:
    - trunk
  needs: ["test-ug"]
